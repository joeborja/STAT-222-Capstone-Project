d2 <- d1
d[,2] <- d[, 2] * 2
d1 <- data.frame(x = c(1,2,3), y = c(4,5,6))
d2 <- d1
d2[,2] <- d2[, 2] * 2
d1 <- data.frame(x = c(1,2,3), y = c(4,5,6))
d2 <- d1
d2[,2] <- d2[, 2] * 2
ref(d1,d2)
d1 <- data.frame(x = c(1,2,3), y = c(4,5,6))
d2 <- d1
d2[,2] <- d2[, 2] * 2
ref(d1,d2)
d3 <- d1
d3[2,] <- d3[2,] * 2
ref(d1,d3)
x <- c('a', 'a', 'bb', 'c')
ref(x, character = TRUE)
x <- c('a', 'a', 'bb', 'c')
ref(x, character = TRUE)
y <- c(1, 1, 22, 3)
ref(y, character = TRUE)
obj_size(cars)
obj_size(cars)
x <- c(1,2,3)
obj_size(x)
obj_size(cars)
x <- 1:10e6
obj_size(x)
obj_size(cars)
x <- 1:10e6
obj_size(x)
y <- runif(10e6)
obj_size(y)
obj_size(cars)
x <- runif(1e6)
obj_size(x)
y <- list (x, x, x)
obj_size(y)
obj_size(cars)
x <- runif(1e6)
obj_size(x)
y <- list (x, x, x)
obj_size(y)
obj_size(list(NULL, NULL, NULL))
obj_size(cars)
x <- runif(1e6)
obj_size(x)
y <- list (x, x, x)
obj_size(y)
obj_size(list(NULL, NULL, NULL))
obj_size(c(1))
obj_size(cars)
x <- runif(1e6)
obj_size(x)
y <- list (x, x, x)
obj_size(y)
obj_size(list(NULL, NULL, NULL))
obj_size(c(1))
obj_size(1)
obj_size(cars)
x <- runif(1e6)
obj_size(x)
y <- list (x, x, x)
obj_size(y)
obj_size(list(NULL, NULL, NULL))
obj_size(c(1))
rep(c(1),10)
obj_size(cars)
x <- runif(1e6)
obj_size(x)
y <- list (x, x, x)
obj_size(y)
obj_size(list(NULL, NULL, NULL))
obj_size(c(1))
obj_size(rep(c(1),5))
obj_size(c(1,1,1,1,1))
obj_size(cars)
x <- runif(1e6)
obj_size(x)
y <- list (x, x, x)
obj_size(y)
obj_size(list(NULL, NULL, NULL))
obj_size(c(1))
obj_size(rep(c(1),100))
obj_size(cars)
x <- runif(1e6)
obj_size(x)
y <- list (x, x, x)
obj_size(y)
obj_size(list(NULL, NULL, NULL))
u <- c(1, 2, 3)
obj_size(u)
obj_size(rep(u,100))
obj_size(cars)
x <- runif(1e6)
obj_size(x)
y <- list (x, x, x)
obj_size(y)
obj_size(list(NULL, NULL, NULL))
u <- c(1, 2, 3)
obj_size(u)
obj_size(rep(u,100))
banana <- "bananas bananas bananas"
obj_size(banana)
obj_size(rep(banana, 100))
obj_size(cars)
x <- runif(1e6)
obj_size(x)
y <- list (x, x, x)
obj_size(y)
obj_size(list(NULL, NULL, NULL))
banana <- "bananas bananas bananas"
obj_size(banana)
obj_size(rep(banana, 100))
u <- c(1, 2, 3)
obj_size(u)
obj_size(rep(u,100))
obj_size(cars)
x <- runif(1e6)
obj_size(x)
y <- list (x, x, x)
obj_size(y)
obj_size(list(NULL, NULL, NULL))
banana <- "bananas bananas bananas"
obj_size(banana)
obj_size(rep(banana, 100))
u <- c(1, 2, 3)
obj_size(u)
obj_size(rep(u,100))
obj_size(x,x)
obj_size(x,y)
obj_size(cars)
x <- runif(1e6)
obj_size(x)
y <- list (x, x, x)
obj_size(y)
obj_size(list(NULL, NULL, NULL))
banana <- "bananas bananas bananas"
obj_size(banana)
obj_size(rep(banana, 100))
u <- c(1, 2, 3)
obj_size(u)
obj_size(rep(u,100))
obj_size(x,u)
obj_size(x,y)
obj_size(cars)
x <- runif(1e6)
obj_size(x)
y <- list (x, x, x)
obj_size(y)
obj_size(list(NULL, NULL, NULL))
banana <- "bananas bananas bananas"
obj_size(banana)
obj_size(rep(banana, 100))
u <- c(1, 2, 3)
obj_size(u)
obj_size(rep(u,100))
obj_size(x,y)
obj_size(1:100)
obj_size(1:1e10)
obj_size(cars)
x <- runif(1e6)
obj_size(x)
y <- runif(1e3)
obj_size(y)
obj_size(list(NULL, NULL, NULL))
z <- list (x, x, y)
obj_size(z)
banana <- "bananas bananas bananas"
obj_size(banana)
obj_size(rep(banana, 100))
u <- c(1, 2, 3)
obj_size(u)
obj_size(rep(u,100))
obj_size(x,y)
obj_size(1:100)
obj_size(1:1e10)
rep(banana, 10)
obj_size(cars)
x <- runif(1e6)
obj_size(x)
y <- runif(1e3)
obj_size(y)
obj_size(list(NULL, NULL, NULL))
z <- list (x, x, y)
obj_size(z)
banana <- "bananas bananas bananas"
obj_size(banana)
obj_size(rep(banana, 100))
u <- c(1, 2, 3)
obj_size(u)
obj_size(rep(u,100))
obj_size(x,y)
obj_size(1:100)
obj_size(1:1e10)
obj_size(c(1,100))
install.packages('bookdown')
source('~/.active-rstudio-document', echo=TRUE)
x <- c("a", "b", "a")
test <- c(a = "Apple")
test[x]
grades <- c(1, 2, 2, 3, 1)
info <- data.frame(
grade = 3:1,
desc = c("Excellent", "Good", "Poor"),
fail = c(F, F, T)
)
info[grades,]
id <- match(grades, info$grade)
info[id,]
x <- c("b", "c", "a")
order(x)
order(x)
x[order(x)]
order(c(3,2,1))
order(c(2,3,1))
order(c(1,2,3))
x
x[3]
order(x)
fit <- ridge(y, X, lambda = 0, rep(1,length(y)))
setwd('Dropbox/Work/Courses/Berkeley/STAT 222/STAT-222-Capstone-Project')
data <- read.csv('Data/deathrate.csv')
# Drop redundant index column
data$X <- NULL
# Drop counties with missing poverty data
data <- data[data$County != 'Kalawao County, HI',]
data <- data[data$County != 'Mc Kean County, PA',]
# Drop duplicate rows
data <- data[-c(788, 3924, 7060, 10196),]
alameda <- data[data$County == 'Alameda County, CA', ]
alameda_y <- alameda[alameda$Year %in% 2000:2014, ]$Deathrate
alameda_x <- alameda[alameda$Year %in% 1999:2013, ]$Deathrate
alameda_X <- diag(alameda_x)
beta <- coef(lm(alameda_y ~ alameda_X + 0))
# Note: We should probably look into changing the linear model
# to a generalized linear model to account for the count data.
# The poisson distribution may be a more accurate model for our data.
plot(beta)
unique_counties <- c('Alameda County, CA', 'Sonoma County, CA', 'Marin County, CA')
# unique_counties <- unique(data$County)
# Change code for all counties
# Note: This throws an error when calling as.matrix below.
# We need to figure out how to solve this memory issue
n <- length(unique_counties)
y_list <- vector("list", n)
X_list <- vector('list', n)
i <- 1
for (county_name in unique_counties) {
county <- data[data$County == county_name,]
county_y <- county[county$Year %in% 2000:2014, ]$Deathrate
county_x <- county[county$Year %in% 1999:2013, ]$Deathrate
county_X <- diag(county_x)
y_list[[i]] <- county_y
X_list[[i]] <- county_X
i <- i+1
}
y <- do.call(c, y_list)
X <- do.call(bdiag, X_list)
X <- as.matrix(X)
beta <- coef(lm(y ~ X + 0))
plot(beta)
ridge <- function(y, X, lambda, prior_mean) {
n <- dim(X)[1]
p <- dim(X)[2]
return(solve((t(X) %*% X + lambda * diag(p)), t(X) %*% y + lambda * prior_mean))
}
# Should recover original linear regression
fit <- ridge(alameda_y, alameda_X, lambda = 0, rep(1,15))
plot(fit)
# Should get closer to all ones vector as lambda increases
fit <- ridge(alameda_y, alameda_X, lambda = 10000, rep(1,15))
plot(fit)
fit <- ridge(y, X, lambda = 0, rep(1,length(y)))
plot(fit)
fit <- ridge(y, X, lambda = 0, rep(1,length(y)))
y <- do.call(c, y_list)
X <- do.call(bdiag, X_list)
X <- as.matrix(X)
fit <- ridge(y, X, lambda = 0, rep(1,length(y)))
dim(X)
X
unique_counties <- c('Alameda County, CA', 'Sonoma County, CA', 'Marin County, CA')
# unique_counties <- unique(data$County)
# Change code for all counties
# Note: This throws an error when calling as.matrix below.
# We need to figure out how to solve this memory issue
n <- length(unique_counties)
y_list <- vector("list", n)
X_list <- vector('list', n)
i <- 1
for (county_name in unique_counties) {
county <- data[data$County == county_name,]
county_y <- county[county$Year %in% 2000:2014, ]$Deathrate
county_x <- county[county$Year %in% 1999:2013, ]$Deathrate
county_X <- diag(county_x)
y_list[[i]] <- county_y
X_list[[i]] <- county_X
i <- i+1
}
y <- do.call(c, y_list)
X <- do.call(bdiag, X_list)
library(Matrix)
X <- do.call(bdiag, X_list)
X <- as.matrix(X)
fit <- ridge(y, X, lambda = 0, rep(1,length(y)))
plot(fit)
X
y
y
data[data$County == 'Alameda County, CA']
data[data$County == 'Alameda County, CA',]
fit <- ridge(y, X, lambda = 10, rep(1,length(y)))
plot(fit)
fit <- ridge(y, X, lambda = 0, rep(1,length(y)))
plot(fit)
fit
fit <- ridge(y, X, lambda = 100, rep(1,length(y)))
plot(fit)
fit <- ridge(y, X, lambda = 0, rep(1,length(y)))
plot(fit)
fit <- ridge(y, X, lambda = 10, rep(1,length(y)))
fit <- ridge(y, X, lambda = 100000, rep(1,length(y)))
plot(fit)
unique(data$County)
fit <- ridge(y, X, lambda = 0, rep(1,length(y)))
plot(fit)
# Should recover original linear regression
fit <- ridge(alameda_y, alameda_X, lambda = 1000000, rep(1,15))
fit <- ridge(y, X, lambda = 0, rep(1,length(y)))
plot(fit)
fit <- ridge(y, X, lambda = 10, rep(1,length(y)))
plot(fit)
fit <- ridge(y, X, lambda = 0, rep(1,length(y)))
for (i in 1:100) {
fit <- ridge(y, X, lambda = i, rep(1,length(y)))
plot(fit)
}
fit <- ridge(y, X, lambda = 0, rep(1,length(y)))
plot(fit)
fit <- ridge(y, X, lambda = 1000000, rep(1,length(y)))
plot(fit)
unique(data$County)
y
beta
alameda_y
alameda_X
alameda_y
alameda_X
county[county$County == 'Alameda County, CA', ]$Deathrate
county[county$County == 'Alameda County, CA', ]
county[county$County == 'Alameda County,CA', ]
county[county$County == 'Alameda County, CA', ]
data[data$County == 'Alameda County, CA', ]$Deathrate
data[data$County == 'Alameda County, CA', ]
alameda_X
lm(alameda_y ~ alameda_X + 0)
plot(coef(lm(alameda_y ~ alameda_X + 0)))
alameda <- data[data$County == 'Prince William County, VA', ]
alameda_y <- alameda[alameda$Year %in% 2000:2014, ]$Deathrate
alameda_x <- alameda[alameda$Year %in% 1999:2013, ]$Deathrate
alameda_X <- diag(alameda_x)
beta <- coef(lm(alameda_y ~ alameda_X + 0))
# Note: We should probably look into changing the linear model
# to a generalized linear model to account for the count data.
# The poisson distribution may be a more accurate model for our data.
plot(beta)
alameda
alameda
alameda <- data[data$County == 'Prince William County, VA', ]
alameda_y <- alameda[alameda$Year %in% 2000:2014, ]$Deathrate
alameda_x <- alameda[alameda$Year %in% 1999:2013, ]$Deathrate
alameda_X <- diag(alameda_x)
beta <- coef(lm(alameda_y ~ alameda_X + 0))
# Note: We should probably look into changing the linear model
# to a generalized linear model to account for the count data.
# The poisson distribution may be a more accurate model for our data.
plot(beta)
sample(unique(data$County), 1)
county_name = sample(unique(data$County), 1) #'Alameda County, CA'
county_name
alameda <- data[data$County == county_name, ]
alameda_y <- alameda[alameda$Year %in% 2000:2014, ]$Deathrate
alameda_x <- alameda[alameda$Year %in% 1999:2013, ]$Deathrate
alameda_X <- diag(alameda_x)
beta <- coef(lm(alameda_y ~ alameda_X + 0))
# Note: We should probably look into changing the linear model
# to a generalized linear model to account for the count data.
# The poisson distribution may be a more accurate model for our data.
plot(beta)
alameda
9/7
5/3
plot(log(beta))
unique_counties <- c('Alameda County, CA', 'Sonoma County, CA', 'Marin County, CA')
beta
log(beta)
plot(beta)
alameda_y <- exp(alameda[alameda$Year %in% 2000:2014, ]$Deathrate)
alameda_x <- exp(alameda[alameda$Year %in% 1999:2013, ]$Deathrate)
alameda_X <- diag(alameda_x)
beta <- coef(lm(alameda_y ~ alameda_X + 0))
# Note: We should probably look into changing the linear model
# to a generalized linear model to account for the count data.
# The poisson distribution may be a more accurate model for our data.
plot(beta)
plot(log(beta))
county_name = 'Alameda County, CA'
alameda <- data[data$County == county_name, ]
alameda_y <- exp(alameda[alameda$Year %in% 2000:2014, ]$Deathrate)
alameda_x <- exp(alameda[alameda$Year %in% 1999:2013, ]$Deathrate)
alameda_X <- diag(alameda_x)
beta <- coef(lm(alameda_y ~ alameda_X + 0))
# Note: We should probably look into changing the linear model
# to a generalized linear model to account for the count data.
# The poisson distribution may be a more accurate model for our data.
plot(beta)
unique_counties <- c('Alameda County, CA', 'Sonoma County, CA', 'Marin County, CA')
unique_counties <- c('Alameda County, CA', 'Sonoma County, CA', 'Marin County, CA')
# unique_counties <- unique(data$County)
# Change code for all counties
# Note: This throws an error when calling as.matrix below.
# We need to figure out how to solve this memory issue
n <- length(unique_counties)
y_list <- vector("list", n)
X_list <- vector('list', n)
i <- 1
for (county_name in unique_counties) {
county <- data[data$County == county_name,]
county_y <- exp(county[county$Year %in% 2000:2014, ]$Deathrate)
county_x <- exp(county[county$Year %in% 1999:2013, ]$Deathrate)
county_X <- diag(county_x)
y_list[[i]] <- county_y
X_list[[i]] <- county_X
i <- i+1
}
library(Matrix)
y <- do.call(c, y_list)
X <- do.call(bdiag, X_list)
X <- as.matrix(X)
beta <- coef(lm(y ~ X + 0))
plot(beta)
plot(log(beta))
fit <- ridge(y, X, lambda = 1000000, rep(1,length(y)))
plot(fit)
fit <- ridge(y, X, lambda = 0, rep(1,length(y)))
plot(fit)
# Should get closer to all ones vector as lambda increases
beta <- ridge(alameda_y, alameda_X, lambda = 10000, rep(1,15))
delta <- log(beta)
plot(delta)
beta <- ridge(y, X, lambda = 0, rep(1,length(y)))
delta <- log(beta)
plot(delta)
beta <- ridge(y, X, lambda = 100, rep(1,length(y)))
delta <- log(beta)
plot(delta)
beta <- ridge(y, X, lambda = 100, rep(1,length(y)))
delta <- log(beta)
plot(delta)
beta <- ridge(y, X, lambda = 1000, rep(1,length(y)))
delta <- log(beta)
plot(delta)
beta <- ridge(y, X, lambda = 10000, rep(1,length(y)))
delta <- log(beta)
plot(delta)
beta <- ridge(y, X, lambda = 100000, rep(1,length(y)))
delta <- log(beta)
plot(delta)
beta <- ridge(y, X, lambda = 1000000, rep(1,length(y)))
delta <- log(beta)
plot(delta)
X
alameda_X
svd(alameda_X)
svd(alameda_X)$d
d <- svd(X)$d
d
d
d**2
d**2 / (d**2 + 1)
sum(d**2 / (d**2 + 1))
sum(d**2 / (d**2 + 100))
sum(d**2 / (d**2 + 100000))
sum(d**2 / (d**2 + 100000000))
beta <- ridge(y, X, lambda = 100000000, rep(1,length(y)))
delta <- log(beta)
plot(delta)
beta <- ridge(y, X, lambda = 100000000, rep(1,length(y)))
sum(d**2 / (d**2 + 100000000000))
sum(d**2 / (d**2 + 10000000000000))
sum(d**2 / (d**2 + 1000000000000))
sum(d**2 / (d**2 + 100000000000))
sum(d**2 / (d**2 + 1000000000))
sum(d**2 / (d**2 + 100000000000))
beta <- ridge(y, X, lambda = 100000000000, rep(1,length(y)))
delta <- log(beta)
plot(delta)
lambda = 100000
sum(d**2 / (d**2 + lambda))
funs <- list(
half = function(x) x / 2,
double = function(x) x * 2
)
funs
funs(10)
funs$half(10)
ls()
body(sample)
args(sample)
body(sample)

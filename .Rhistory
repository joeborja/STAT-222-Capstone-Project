y/x - beta == 0
beta
# Check
y/x - beta == 0
# Two counties
data
# Two counties
head(data)
# Two counties
sonoma <- data[data$County == 'Sonoma County, CA', ]
sonoma
bdiag(alameda_X, sonoma_X)
library(Matrix)
bdiag(alameda_X, sonoma_X)
# Two counties
alameda_y <- y
alameda_X <- X
bdiag(alameda_X, sonoma_X)
sonoma <- data[data$County == 'Sonoma County, CA', ]
sonoma_y <- sonoma[sonoma$Year %in% 2000:2014, ]$Deathrate
sonoma_x <- sonoma[sonoma$Year %in% 1999:2013, ]$Deathrate
sonoma_X <- diag(sonoma_x)
bdiag(alameda_X, sonoma_X)
y
y <- c(alameda_y, sonoma_y)
y
plot(Y)
plot(y)
beta <- coef(lm(y ~ X + 0))
dim(X)
X <- bdiag(alameda_X, sonoma_X)
dim(X)
y <- c(alameda_y, sonoma_y)
beta <- coef(lm(y ~ X + 0))
X <- adiag(alameda_X, sonoma_X)
library(magic)
X <- asmatrix(bdiag(alameda_X, sonoma_X))
X <- a.smatrix(bdiag(alameda_X, sonoma_X))
X <- as.matrix(bdiag(alameda_X, sonoma_X))
y <- c(alameda_y, sonoma_y)
beta <- coef(lm(y ~ X + 0))
beta
plot(beta)
unique(data$County)
print(county)
for (county in unique(data$County)) {
print(county)
}
X
bdiag(X,X)
y
c(y,y)
a = NULL
c(a,y)
c(a,y,y)
b = 1
bdiag(b,b)
bdiag(a,b)
list_y = list()
list_y
c(list_y, a)
a
c(list_y, b)
beta
n <- length(unqiue(data$County))
n <- length(unique(data$County))
n
y_list <- vector("list", n)
X_list <- vector('list', n)
y_list
for (i in 1:n) {
county <- data[data$County == county_name]
county_y <- county[county$Year %in% 2000:2013, ]$Deathrate
county_x <- county[county$Year %in% 1999:2013, ]$Deathrate
county_X <- diag(county_x)
y_list[i] <- county_y
X_list[i] <- county_X
}
for (county_name in unique_counties) {
county <- data[data$County == county_name]
county_y <- county[county$Year %in% 2000:2013, ]$Deathrate
county_x <- county[county$Year %in% 1999:2013, ]$Deathrate
county_X <- diag(county_x)
y_list[i] <- county_y
X_list[i] <- county_X
i <- i+1
}
unique_counties <- unique(data$County)
n <- length(unique_counties)
y_list <- vector("list", n)
X_list <- vector('list', n)
i <- 1
for (county_name in unique_counties) {
county <- data[data$County == county_name]
county_y <- county[county$Year %in% 2000:2013, ]$Deathrate
county_x <- county[county$Year %in% 1999:2013, ]$Deathrate
county_X <- diag(county_x)
y_list[i] <- county_y
X_list[i] <- county_X
i <- i+1
}
for (county_name in unique_counties) {
county <- data[data$County == county_name,]
county_y <- county[county$Year %in% 2000:2013, ]$Deathrate
county_x <- county[county$Year %in% 1999:2013, ]$Deathrate
county_X <- diag(county_x)
y_list[i] <- county_y
X_list[i] <- county_X
i <- i+1
}
warnings()
y_list
y_list <- vector("list", n)
X_list <- vector('list', n)
i <- 1
for (county_name in unique_counties) {
county <- data[data$County == county_name,]
county_y <- county[county$Year %in% 2000:2013, ]$Deathrate
county_x <- county[county$Year %in% 1999:2013, ]$Deathrate
county_X <- diag(county_x)
y_list[[i]] <- county_y
X_list[[i]] <- county_X
i <- i+1
}
y_list
y <- c(y_list)
y
length(y)
c(y_list)
y <- do.call(c, y_list)
y
length(y_list)
length(y)
length(y) / length(y_list)
X_list
X <- do.call(bdiag, X_list)
X
dim(X)
X <- as.matrix(do.call(bdiag, X_list))
beta <- coef(lm(y ~ X + 0))
y
dim(y)
type(y)
typeof(y)
length(y)
dim(X)
X
beta <- coef(lm(y ~ X + 0))
typeof(X)
X <- as.matrix(bdiag(alameda_X, sonoma_X))
typeof(X)
X
X <- do.call(bdiag, X_list)
X
typeof(X)
as.matrix(X)
unique_counties <- c('Alameda County, CA', 'Sonoma County, CA')
n <- length(unique_counties)
y_list <- vector("list", n)
X_list <- vector('list', n)
i <- 1
for (county_name in unique_counties) {
county <- data[data$County == county_name,]
county_y <- county[county$Year %in% 2000:2013, ]$Deathrate
county_x <- county[county$Year %in% 1999:2013, ]$Deathrate
county_X <- diag(county_x)
y_list[[i]] <- county_y
X_list[[i]] <- county_X
i <- i+1
}
y <- do.call(c, y_list)
X <- do.call(bdiag, X_list)
as.matrix(X)
X <- as.matrix(X)
X
beta <- coef(lm(y ~ X + 0))
y
beta <- coef(lm(y ~ X + 0))
X
dim(X)
length(Y)
length(y)
unique_counties <- c('Alameda County, CA', 'Sonoma County, CA')
# unique_counties <- unique(data$County) # Change code for all counties
n <- length(unique_counties)
y_list <- vector("list", n)
X_list <- vector('list', n)
i <- 1
for (county_name in unique_counties) {
county <- data[data$County == county_name,]
county_y <- county[county$Year %in% 2000:2014, ]$Deathrate
county_x <- county[county$Year %in% 1999:2013, ]$Deathrate
county_X <- diag(county_x)
y_list[[i]] <- county_y
X_list[[i]] <- county_X
i <- i+1
}
y <- do.call(c, y_list)
X <- do.call(bdiag, X_list)
X <- as.matrix(X)
beta <- coef(lm(y ~ X + 0))
typeof(X)
beta
y
X
beta
#unique_counties <- c('Alameda County, CA', 'Sonoma County, CA')
unique_counties <- unique(data$County) # Change code for all counties
n <- length(unique_counties)
y_list <- vector("list", n)
X_list <- vector('list', n)
i <- 1
for (county_name in unique_counties) {
county <- data[data$County == county_name,]
county_y <- county[county$Year %in% 2000:2014, ]$Deathrate
county_x <- county[county$Year %in% 1999:2013, ]$Deathrate
county_X <- diag(county_x)
y_list[[i]] <- county_y
X_list[[i]] <- county_X
i <- i+1
}
y <- do.call(c, y_list)
X <- do.call(bdiag, X_list)
X <- as.matrix(X)
beta <- coef(lm(y ~ X + 0))
# unique_counties <- unique(data$County)
# Change code for all counties
# Note: This throws an error when calling as.matrix below.
# The matrix might be too big.
n <- length(unique_counties)
y_list <- vector("list", n)
X_list <- vector('list', n)
i <- 1
for (county_name in unique_counties) {
county <- data[data$County == county_name,]
county_y <- county[county$Year %in% 2000:2014, ]$Deathrate
county_x <- county[county$Year %in% 1999:2013, ]$Deathrate
county_X <- diag(county_x)
y_list[[i]] <- county_y
X_list[[i]] <- county_X
i <- i+1
}
y <- do.call(c, y_list)
X <- do.call(bdiag, X_list)
X <- as.matrix(X)
beta <- coef(lm(y ~ X + 0))
unique_counties <- c('Alameda County, CA', 'Sonoma County, CA')
# unique_counties <- unique(data$County)
# Change code for all counties
# Note: This throws an error when calling as.matrix below.
# The matrix might be too big.
n <- length(unique_counties)
y_list <- vector("list", n)
X_list <- vector('list', n)
i <- 1
for (county_name in unique_counties) {
county <- data[data$County == county_name,]
county_y <- county[county$Year %in% 2000:2014, ]$Deathrate
county_x <- county[county$Year %in% 1999:2013, ]$Deathrate
county_X <- diag(county_x)
y_list[[i]] <- county_y
X_list[[i]] <- county_X
i <- i+1
}
y <- do.call(c, y_list)
X <- do.call(bdiag, X_list)
X <- as.matrix(X)
beta <- coef(lm(y ~ X + 0))
typeof(X)
beta
#unique_counties <- c('Alameda County, CA', 'Sonoma County, CA')
unique_counties <- unique(data$County)
# Change code for all counties
# Note: This throws an error when calling as.matrix below.
# The matrix might be too big.
n <- length(unique_counties)
y_list <- vector("list", n)
X_list <- vector('list', n)
i <- 1
for (county_name in unique_counties) {
county <- data[data$County == county_name,]
county_y <- county[county$Year %in% 2000:2014, ]$Deathrate
county_x <- county[county$Year %in% 1999:2013, ]$Deathrate
county_X <- diag(county_x)
y_list[[i]] <- county_y
X_list[[i]] <- county_X
i <- i+1
}
y <- do.call(c, y_list)
X <- do.call(bdiag, X_list)
X <- as.matrix(X)
memory.limit()
unique_counties <- c('Alameda County, CA', 'Sonoma County, CA', 'Marin County, CA')
# unique_counties <- unique(data$County)
# Change code for all counties
# Note: This throws an error when calling as.matrix below.
# We need to figure out how to solve this memory issue
n <- length(unique_counties)
y_list <- vector("list", n)
X_list <- vector('list', n)
i <- 1
for (county_name in unique_counties) {
county <- data[data$County == county_name,]
county_y <- county[county$Year %in% 2000:2014, ]$Deathrate
county_x <- county[county$Year %in% 1999:2013, ]$Deathrate
county_X <- diag(county_x)
y_list[[i]] <- county_y
X_list[[i]] <- county_X
i <- i+1
}
y <- do.call(c, y_list)
X <- do.call(bdiag, X_list)
X <- as.matrix(X)
beta <- coef(lm(y ~ X + 0))
beta
plot(beta)
plot(beta)
alameda <- data[data$County == 'Alameda County, CA', ]
alameda_y <- alameda[alameda$Year %in% 2000:2014, ]$Deathrate
alameda_x <- alameda[alameda$Year %in% 1999:2013, ]$Deathrate
alameda_X <- diag(alameda_x)
beta <- coef(lm(alameda_y ~ alameda_X + 0))
lambdas <- 10^seq(3, -2, by = -.1)
lambdas
lambda = 1
beta <- coef(lm(alameda_y ~ alameda_X + 0))
alpha = 0 # Ridge regression
lambda = 1
lambdas <- 10^seq(3, -2, by = -.1)
fit <- glmnet(alameda_X, alameda_y, alpha = alpha, lambda = lambda)
library(glmnet)
install.packages('glmnet')
fit <- glmnet(alameda_X, alameda_y, alpha = alpha, lambda = lambda)
# install.packages('glmnet')
library(glmnet)
fit <- glmnet(alameda_X, alameda_y, alpha = alpha, lambda = lambda)
summary(fit)
fit$beta
plot(fit$beta)
alameda <- data[data$County == 'Alameda County, CA', ]
alameda_y <- alameda[alameda$Year %in% 2000:2014, ]$Deathrate
alameda_x <- alameda[alameda$Year %in% 1999:2013, ]$Deathrate
alameda_X <- diag(alameda_x)
beta <- coef(lm(alameda_y ~ alameda_X + 0))
alameda <- data[data$County == 'Alameda County, CA', ]
alameda_y <- alameda[alameda$Year %in% 2000:2014, ]$Deathrate
alameda_x <- alameda[alameda$Year %in% 1999:2013, ]$Deathrate
alameda_X <- diag(alameda_x)
beta <- coef(lm(alameda_y ~ alameda_X + 0))
plot(beta)
plot(fit$beta)
plot(beta)
fit <- glmnet(alameda_X, alameda_y, alpha = alpha, lambda = 0)
summary(fit)
plot(fit$beta)
fit
summary(fit)
plot(beta)
fit <- glmnet(alameda_X, alameda_y, alpha = alpha, lambda = 0)
summary(fit)
fit$lambda
fit$beta
beta <- coef(lm(alameda_y ~ alameda_X + 0))
plot(beta)
fit <- glmnet(alameda_X, alameda_y, alpha = alpha, lambda = 0, intercept = FALSE)
summary(fit)
plot(fit$beta)
fit <- glmnet(alameda_X, alameda_y, alpha = alpha, lambda = 0, intercept = FALSE)
summary(fit)
plot(fit$beta)
fit <- glmnet(alameda_X, alameda_y, alpha = alpha, lambda = 1, intercept = FALSE)
summary(fit)
plot(fit$beta)
fit <- glmnet(alameda_X, alameda_y, alpha = alpha, lambda = 1000, intercept = FALSE)
summary(fit)
plot(fit$beta)
beta <- coef(glm(alameda_y ~ alameda_X + 0, family = 'gaussian'))
plot(beta)
beta <- coef(glm(alameda_y ~ alameda_X + 0, family = 'poisson'))
plot(beta)
beta <- coef(glm(alameda_y ~ alameda_X + 0, family = 'gaussian'))
# Note: We should probably look into changing the family to Poisson
# since we have count data
plot(beta)
unique_counties <- c('Alameda County, CA', 'Sonoma County, CA', 'Marin County, CA')
beta <- coef(glm(alameda_y ~ alameda_X + 0, family = 'Poisson'))
beta <- coef(glm(alameda_y ~ alameda_X + 0, family = 'poisson'))
# Note: We should probably look into changing the family to Poisson
# since we have count data
plot(beta)
unique_counties <- c('Alameda County, CA', 'Sonoma County, CA', 'Marin County, CA')
beta <- coef(lm(alameda_y ~ alameda_X + 0))
# Note: We should probably look into changing the linear model
# to a generalized linear model to account for the count data.
# The poisson distribution may be a more accurate model for our data.
plot(beta)
fit <- glmnet(alameda_X, alameda_y, alpha = alpha, lambda = 1000, intercept = FALSE)
summary(fit)
plot(fit$beta)
fit <- glmnet(alameda_X, alameda_y, alpha = alpha, lambda = 0, intercept = FALSE)
summary(fit)
plot(fit$beta)
# install.packages('glmnet')
library(arm)
# install.packages('arm')
library(arm)
install.packages('arm')
# install.packages('arm')
library(arm)
ones(1)
rep(1,10)
fit <- glmnet(alameda_X, alameda_y - rep(1,15), alpha = alpha, lambda = 0, intercept = FALSE)
summary(fit)
plot(fit$beta)
plot(fit$beta + ones)
ones <- rep(1,15)
fit <- glmnet(alameda_X, alameda_y - ones, alpha = alpha, lambda = 0, intercept = FALSE)
summary(fit)
plot(fit$beta + ones)
ones <- rep(1,15)
fit <- glmnet(alameda_X, alameda_y - ones, alpha = alpha, lambda = 100, intercept = FALSE)
summary(fit)
plot(fit$beta + ones)
fit <- glmnet(alameda_X, alameda_y, alpha = alpha, lambda = 100, intercept = FALSE)
summary(fit)
plot(fit$beta)
ones <- rep(1,15)
fit <- glmnet(alameda_X, alameda_y - ones, alpha = alpha, lambda = 0, intercept = FALSE)
summary(fit)
plot(fit$beta + ones)
plot(beta)
plot(beta)
plot(fit$beta + ones)
fit <- glmnet(alameda_X, alameda_y , alpha = alpha, lambda = 0, intercept = FALSE)
summary(fit)
plot(fit$beta)
plot(beta)
fit <- glmnet(alameda_X, alameda_y , alpha = alpha, lambda = 0, intercept = FALSE, offset = ones)
summary(fit)
plot(fit$beta)
plot(beta)
ones
beta
fit <- glmnet(alameda_X, alameda_y , alpha = alpha, lambda = 0, intercept = FALSE, offset = ones)
summary(fit)
plot(fit$beta)
fit$beta
fit <- glmnet(alameda_X, alameda_y , alpha = alpha, lambda = 100, intercept = FALSE, offset = ones)
summary(fit)
plot(fit$beta)
fit <- glmnet(alameda_X, alameda_y - ones, alpha = alpha, lambda = 0, intercept = FALSE)
summary(fit)
plot(fit$beta + ones)
fit$beta
fit$beta + ones
X
X <- alameda_X
y <- alameda_y
X
y
diag(5)
dim(X)
length(y0)
length(y)
dim(X)
dim(X)[2]
n, p = dim(X)
c(n,p) = dim(X)
ridge <- function(y, X, lambda, prior_mean) {
n <- dim(X)[1]
p <- dim(X)[2]
return(solve((t(X) %*% X + lambda * diag(p)), t(X) %*% y + lambda * prior_mean))
}
ridge(y,X, 0, NULL)
ridge(y,X, 0, rep(0,15))
beta
plot(ridge(y,X, 0, rep(0,15)))
plot(beta)
ridge(alameda_y, alameda_X, lambda = 0, rep(1,15))
ridge(alameda_y, alameda_X, lambda = 1000, rep(1,15))
# Should get closer to all ones vector as lambda increases
ridge(alameda_y, alameda_X, lambda = 10000, rep(1,15))
# Should get closer to all ones vector as lambda increases
plot(ridge(alameda_y, alameda_X, lambda = 10000, rep(1,15)))
y <- do.call(c, y_list)
X <- do.call(bdiag, X_list)
X <- as.matrix(X)
# Should recover original linear regression
fit <- ridge(alameda_y, alameda_X, lambda = 0, rep(1,15))
plot(fit)
# Should get closer to all ones vector as lambda increases
fit <- ridge(alameda_y, alameda_X, lambda = 10000, rep(1,15))
plot(fit)
# Should recover original linear regression
fit <- ridge(alameda_y, alameda_X, lambda = 0, rep(1,15))
plot(fit)
beta <- coef(lm(alameda_y ~ alameda_X + 0))
# Note: We should probably look into changing the linear model
# to a generalized linear model to account for the count data.
# The poisson distribution may be a more accurate model for our data.
plot(beta)
fit <- ridge(y, X, lambda = 0, rep(1,length(y)))
fit
plot(fit)
fit <- ridge(y, X, lambda = 10, rep(1,length(y)))
plot(fit)
fit <- ridge(y, X, lambda = 100, rep(1,length(y)))
plot(fit)
fit <- ridge(y, X, lambda = 1000, rep(1,length(y)))
plot(fit)
fit <- ridge(y, X, lambda = 10000, rep(1,length(y)))
plot(fit)
